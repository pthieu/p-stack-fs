version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4
  aws-ecr: circleci/aws-ecr@9

variables:
  - &build-image cimg/node:20.2.0
  - &ecr-repo p-stack-fs

parameters:
  workspace:
    type: string
    default: "/home/circleci/repo"
    description: |
      The workspace to use for the pipeline.
  version-tag:
    type: string
    default: "${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:8}"
    description: |
      The version tag to apply to the image.
  architecture:
    type: string
    default: "linux/aarch64"
    description: |
      The architecture to build the image for.
  run-all:
    type: boolean
    default: false
  run-next-pipeline:
    type: boolean
    default: false

workflows:
  next-app:
    when:
      or:
        - equal: [true, << pipeline.parameters.run-all >>]
        - equal: [true, << pipeline.parameters.run-next-pipeline >>]
    jobs:
      - build_workspace:
          filters:
            branches:
              only:
                - main
      - lint_and_compile:
          requires:
            - build_workspace
      # - wait_for_approval:
      #     type: approval
      #     requires:
      #       - lint_and_compile
      - build_and_push:
          context:
            - global
          repo: *ecr-repo
          requires:
            - lint_and_compile
            # - wait_for_approval
      - run_migrations:
          requires:
            - build_and_push

jobs:
  build_workspace:
    docker:
      - image: *build-image
    working_directory: << pipeline.parameters.workspace >>/next-app
    steps:
      - checkout:
          path: << pipeline.parameters.workspace >>
      - run:
          name: Install pnpm
          command: sudo npm install -g pnpm
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install Dependencies
          command: pnpm install
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: << pipeline.parameters.workspace >>
          paths:
            - .
  lint_and_compile:
    docker:
      - image: *build-image
    working_directory: << pipeline.parameters.workspace >>/next-app
    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace >>
      - run:
          name: Lint
          command: pnpm run lint
      # - run:
      #     name: Compile
      #     command: pnpm run build
      # - persist_to_workspace:
      #     root: << pipeline.parameters.workspace >>
      #     paths:
      #       - .
  run_migrations:
    docker:
      - image: *build-image
        environment:
          NODE_ENV: production
    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace >>
      - run:
          name: Run Migrations
          command: pnpm run migrate
      # - persist_to_workspace:
      #     root: << pipeline.parameters.workspace >>
      #     paths:
      #       - .
  build_and_push:
    working_directory: << pipeline.parameters.workspace >>/next-app
    resource_class: arm.medium
    machine:
      image: ubuntu-2004:current
    executor: aws-ecr/default
    parameters:
      repo:
        type: string
        default: ""
        description: |
          The name of the ECR repo to push an image to.
      region:
        type: string
        default: "us-west-2"
        description: |
          The AWS region to push the image to.
    steps:
      # XXX(Phong) - TODO: figure this out
      # - run:
      #     name: Set up custom environment variables
      #     command: |
      #       echo "export SSM_BASE_PATH=SOME VALUE HERE" >> $BASH_ENV
      - attach_workspace:
          at: << pipeline.parameters.workspace >>
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
              role_arn: arn:aws:iam::$AWS_ACCOUNT_ID
          path: << pipeline.parameters.workspace >>/next-app
          platform: << pipeline.parameters.architecture >>
          region: us-west-2
          checkout: false
          repo: << parameters.repo >>
          tag: << pipeline.parameters.version-tag >>,latest
          # XXX(Phong) - TODO: figure this out
          # extra-build-args: --build-arg DATABASE_URL --build-arg SSM_BASE_PATH
      - persist_to_workspace:
          root: << pipeline.parameters.workspace >>
          paths:
            - .
